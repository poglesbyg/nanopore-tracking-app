
# Nanopore Tracking Application - Development Guidelines

## Tech Stack & Architecture

### Core Technologies
- **Frontend**: React 19, TypeScript, Astro 5.x
- **Backend**: tRPC, PostgreSQL, Kysely ORM
- **Styling**: Tailwind CSS, Radix UI components
- **Authentication**: Better-auth
- **AI Integration**: Ollama, RAG system
- **Testing**: Vitest (unit), Playwright (e2e)
- **Package Manager**: pnpm

### Architecture Patterns
- **Clean Architecture**: Separated concerns with repositories, services, and controllers
- **Dependency Injection**: Container-based service registration
- **Error Boundaries**: React error handling with graceful degradation
- **Server-Side Rendering**: Astro-based SSR with React islands
- **Type Safety**: Full TypeScript coverage with Zod validation

## Development Guidelines

### Code Quality Rules
- Only modify code directly relevant to the specific request
- Never use placeholders like `# ... rest of the processing ...` - always include complete code
- Break problems into smaller steps and implement incrementally
- Always provide a complete PLAN with REASONING before making changes
- Add proper error handling and logging for debugging

### File Structure Conventions
```
src/
├── components/         # React components (UI + business logic)
├── lib/               # Core utilities and services
├── pages/             # Astro pages and API routes
├── services/          # Business logic layer
├── repositories/      # Data access layer
├── middleware/        # Request/response processing
└── hooks/            # Custom React hooks
```

## Core Business Logic Components (Priority: Critical)

### 1. Sample Management System
- **Location**: `src/lib/api/nanopore.ts`, `src/services/implementations/SampleService.ts`
- **Features**: CRUD operations, status tracking, priority management
- **Database**: PostgreSQL with Kysely ORM
- **Validation**: Zod schemas for type safety

### 2. AI-Enhanced PDF Processing
- **Location**: `src/lib/ai/` directory
- **Components**: 
  - `nanopore-llm-service.ts` - LLM integration
  - `pdf-text-extraction.ts` - PDF parsing
  - `rag-system.ts` - Retrieval augmented generation
- **Features**: Form data extraction, validation, confidence scoring

### 3. Authentication & Security
- **Location**: `src/lib/auth/`, `src/components/auth/`
- **Provider**: Better-auth with admin-level access control
- **Components**: Login forms, auth wrappers, session management

## Key Integration Points (Priority: High)

### 1. tRPC API Layer
- **Location**: `src/lib/trpc.ts`, `src/pages/api/trpc/`
- **Pattern**: Type-safe client-server communication
- **Context**: Database injection, request validation
- **Procedures**: Public procedures with Zod validation

### 2. Database Layer
- **Location**: `src/lib/database.ts`, `src/repositories/`
- **ORM**: Kysely with PostgreSQL
- **Pattern**: Repository pattern for data access
- **Types**: Generated TypeScript types from schema

### 3. Component Architecture
- **Location**: `src/components/nanopore/`
- **Pattern**: Compound components with shared state
- **Key Components**:
  - `nanopore-dashboard.tsx` - Main dashboard
  - `pdf-upload.tsx` - File upload handling
  - `export-modal.tsx` - Data export functionality

## Development Workflows

### Testing Strategy
- **Unit Tests**: `pnpm test:unit` (Vitest)
- **E2E Tests**: `pnpm test:e2e` (Playwright)
- **Type Checking**: `pnpm lint` (TypeScript)
- **Formatting**: `pnpm format` (Prettier)

### Deployment Pipeline
- **Development**: `pnpm dev` (port 3001)
- **Build**: `pnpm build` (Astro build)
- **Deploy**: OpenShift with Docker containers
- **Scripts**: `scripts/deploy-openshift.sh`

## Code Standards

### TypeScript Best Practices
- Use strict type checking with `noEmit`
- Prefer interfaces over types for object shapes
- Use Zod for runtime validation
- Export types from dedicated type files

### React Patterns
- Use functional components with hooks
- Implement error boundaries for critical sections
- Use React Query for server state management
- Follow compound component patterns for complex UI

### Styling Guidelines
- Use Tailwind utility classes
- Implement consistent spacing (4px grid)
- Use Radix UI for accessible components
- Follow mobile-first responsive design

## Security Considerations
- Never expose database credentials in client code
- Use environment variables for sensitive configuration
- Implement proper input validation with Zod
- Follow secure authentication patterns with Better-auth
- Use HTTPS for all external communications

## Performance Optimization
- Implement code splitting for large components
- Use React.memo for expensive computations
- Optimize database queries with proper indexing
- Implement caching strategies for static data
- Monitor bundle size and loading performance

## Python Backend Development Guidelines

### Core Architecture Principles

#### 1. Clean Architecture
- **Domain Layer**: Pure business logic with no dependencies
- **Application Layer**: Use cases and application services
- **Infrastructure Layer**: Database, external APIs, and framework-specific code
- **Dependency Rule**: Dependencies only point inward (infrastructure → application → domain)
- **Interface Segregation**: Define narrow, specific interfaces for each use case

#### 2. Dependency Injection
- **Container Pattern**: Use dependency injection containers for service registration
- **Constructor Injection**: Prefer constructor injection over property injection
- **Interface-Based**: Depend on abstractions, not concrete implementations
- **Scoped Lifetimes**: Manage service lifetimes (singleton, scoped, transient)
- **Example Structure**:
  ```python
  # services/python-sample-management/app/core/dependencies.py
  def get_sample_service(db: Session = Depends(get_db)) -> SampleService:
      repository = SampleRepository(db)
      return SampleService(repository)
  ```

### Configuration Management

#### Environment-Based Configuration
- **Pydantic Settings**: Use Pydantic for type-safe configuration
- **Environment Variables**: Load from `.env` files and environment
- **Validation**: Automatic validation with helpful error messages
- **Multiple Environments**: Support dev, staging, and production configs
- **Example Pattern**:
  ```python
  # app/core/config.py
  class Settings(BaseSettings):
      database_url: PostgresDsn
      redis_url: Optional[RedisDsn] = None
      log_level: str = "INFO"
      
      class Config:
          env_file = ".env"
          env_file_encoding = "utf-8"
  ```

### Structured Logging

#### Logging Standards
- **JSON Format**: Use structured JSON logging in production
- **Human-Readable**: Pretty-printed logs for development
- **Correlation IDs**: Track requests across services
- **Performance Metrics**: Log response times and resource usage
- **Log Levels**: Use appropriate levels (DEBUG, INFO, WARNING, ERROR, CRITICAL)
- **Example Setup**:
  ```python
  # app/core/logging.py
  logger = structlog.get_logger()
  logger.bind(correlation_id=request_id)
  ```

### Error Handling

#### Exception Hierarchy
- **Base Exceptions**: Create custom base exception classes
- **Domain Exceptions**: Business logic violations
- **Application Exceptions**: Use case failures
- **Infrastructure Exceptions**: External service failures
- **HTTP Exceptions**: API-specific errors with status codes
- **Error Responses**: Standardized error format with error codes
- **Example Structure**:
  ```python
  # app/core/exceptions.py
  class DomainException(Exception): pass
  class NotFoundError(DomainException): pass
  class ValidationError(DomainException): pass
  ```

### API Design Patterns

#### RESTful API Standards
- **Versioning**: URL path versioning (e.g., `/api/v1/`)
- **OpenAPI Documentation**: Auto-generated with FastAPI
- **Request Validation**: Pydantic models for all requests
- **Response Models**: Consistent response structure
- **Status Codes**: Appropriate HTTP status codes
- **HATEOAS**: Include resource links where appropriate
- **Pagination**: Consistent pagination for list endpoints
- **Example Endpoint**:
  ```python
  @router.post("/samples", response_model=SampleResponse)
  async def create_sample(
      sample: SampleCreate,
      service: SampleService = Depends(get_sample_service)
  ):
      return await service.create_sample(sample)
  ```

### Database Management

#### Async SQLAlchemy Patterns
- **Connection Pooling**: Configure appropriate pool sizes
- **Repository Pattern**: Encapsulate data access logic
- **Unit of Work**: Transaction management pattern
- **Query Optimization**: Use eager loading for relationships
- **Migration Strategy**: Alembic for schema versioning
- **Example Repository**:
  ```python
  # app/repositories/sample_repository.py
  class SampleRepository:
      def __init__(self, db: AsyncSession):
          self.db = db
      
      async def get_by_id(self, id: int) -> Optional[Sample]:
          result = await self.db.execute(
              select(Sample).where(Sample.id == id)
          )
          return result.scalar_one_or_none()
  ```

### Testing Strategy

#### Comprehensive Testing
- **Test Structure**: Arrange-Act-Assert pattern
- **Unit Tests**: Test business logic in isolation
- **Integration Tests**: Test API endpoints with real database
- **Test Fixtures**: Use pytest fixtures for setup
- **Test Factories**: Factory pattern for test data
- **Mocking**: Mock external dependencies
- **Coverage Goals**: Maintain >80% code coverage
- **Example Test**:
  ```python
  # tests/unit/test_sample_service.py
  @pytest.mark.asyncio
  async def test_create_sample(sample_service, sample_data):
      # Arrange
      expected_sample = Sample(**sample_data)
      
      # Act
      result = await sample_service.create_sample(sample_data)
      
      # Assert
      assert result.id == expected_sample.id
  ```

### Python-Specific Best Practices

#### Code Quality Standards
1. **Type Hints**: Always use type hints for function signatures
2. **Docstrings**: Document all public functions with Google/NumPy style
3. **Code Formatting**: Use Black for consistent formatting
4. **Linting**: Configure Pylint/Flake8 with project rules
5. **Import Order**: Follow PEP 8 import ordering
6. **Async/Await**: Use async patterns for I/O operations
7. **Context Managers**: Use `with` statements for resource management
8. **Error Messages**: Provide helpful, actionable error messages

#### SOLID Principles Application
- **Single Responsibility**: Each class/function has one reason to change
- **Open/Closed**: Open for extension, closed for modification
- **Liskov Substitution**: Subtypes must be substitutable
- **Interface Segregation**: Many specific interfaces over general ones
- **Dependency Inversion**: Depend on abstractions, not concretions

#### Performance Considerations
- **Database Queries**: Use select_related/prefetch_related
- **Caching**: Implement Redis caching for expensive operations
- **Connection Pooling**: Configure appropriate pool sizes
- **Async Operations**: Use asyncio for concurrent operations
- **Profiling**: Profile code to identify bottlenecks
- **Memory Management**: Monitor memory usage in production

#### Security Practices
- **Input Validation**: Validate all inputs with Pydantic
- **SQL Injection**: Use parameterized queries (SQLAlchemy)
- **Authentication**: JWT tokens with proper expiration
- **Authorization**: Role-based access control (RBAC)
- **Secrets Management**: Never commit secrets to code
- **CORS**: Configure appropriate CORS policies
- **Rate Limiting**: Implement API rate limiting

#### Development Workflow
- **Virtual Environments**: Use venv or poetry for isolation
- **Requirements Management**: Pin dependencies with versions
- **Pre-commit Hooks**: Automate code quality checks
- **CI/CD Integration**: Run tests on every commit
- **Code Reviews**: Mandatory reviews for all changes
- **Documentation**: Keep API docs and README updated

## OpenShift Development Guidelines

### Container Strategy
- **Base Images**: Use UBI (Universal Base Image) for production deployments
- **Multi-stage Builds**: Optimize Docker images for size and security
- **Health Checks**: Implement readiness and liveness probes
- **Resource Limits**: Define CPU/memory limits for optimal scheduling

### Deployment Patterns
- **Location**: `deployment/openshift/` directory
- **Core Templates**:
  - `deployment.yaml` - Main application deployment
  - `configmap.yaml` - Environment configuration
  - `secret.yaml` - Sensitive data management
  - `routes.yaml` - External access configuration
- **Scaling**: Use HPA (Horizontal Pod Autoscaler) for automatic scaling
- **Rolling Updates**: Zero-downtime deployments with readiness checks

### Service Architecture
- **Microservices**: Each service in separate namespace or project
- **Service Discovery**: Use OpenShift DNS for service-to-service communication
- **Load Balancing**: Router-based traffic distribution
- **API Gateway**: Centralized request routing and rate limiting

### Security & Compliance
- **Security Context Constraints (SCC)**: Use restricted SCC by default
- **Service Accounts**: Dedicated service accounts with minimal privileges
- **Network Policies**: Implement namespace isolation
- **Image Security**: Scan images for vulnerabilities before deployment
- **Secrets Management**: Use OpenShift secrets, never hardcode credentials

### Monitoring & Observability
- **Prometheus Integration**: Custom metrics and alerts
- **Logging**: Structured logging to stdout/stderr for collection
- **Tracing**: Distributed tracing for microservices communication
- **Health Endpoints**: `/health`, `/ready`, `/metrics` endpoints

### Development Workflow
- **Local Development**: Use `oc port-forward` for service access
- **Build Configs**: S2I (Source-to-Image) builds for automated deployments
- **Image Streams**: Version management for container images
- **Pipelines**: Tekton-based CI/CD integration

### Configuration Management
- **ConfigMaps**: Non-sensitive configuration data
- **Secrets**: Sensitive data (database passwords, API keys)
- **Environment Variables**: Runtime configuration injection
- **Volume Mounts**: File-based configuration when needed

### Resource Management
- **Quotas**: Project-level resource quotas
- **Limit Ranges**: Default resource limits for containers
- **Storage**: Persistent volumes for stateful services
- **CPU/Memory**: Right-sizing based on actual usage

### Networking
- **Routes**: External HTTP/HTTPS access with SSL termination
- **Services**: Internal service discovery and load balancing
- **Ingress**: Alternative to Routes for advanced routing rules
- **Network Policies**: Pod-to-pod communication restrictions

### Best Practices
- **12-Factor App**: Follow cloud-native application principles
- **Stateless Design**: Store state in external databases or caches
- **Graceful Shutdown**: Handle SIGTERM signals properly
- **Configuration Externalization**: Separate config from code
- **Health Checks**: Implement proper health check endpoints