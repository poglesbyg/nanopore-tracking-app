---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nanopore-config
  namespace: dept-barc
data:
  DATABASE_URL: "postgresql://postgres:password@postgresql:5432/nanopore_db"
  REDIS_URL: "redis://redis:6379"
  API_GATEWAY_URL: "http://python-gateway:8000"
  VITE_API_URL: "http://python-gateway:8000"
  VITE_ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  CORS_ORIGINS: "http://localhost:3001,https://nanopore-app-dept-barc.apps.cloudapps.unc.edu"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: nanopore-secrets
  namespace: dept-barc
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # 'password'
  jwt-secret: bXktc2VjcmV0LWtleS1mb3ItcHJvZHVjdGlvbg==  # 'my-secret-key-for-production'

---
# PostgreSQL Database (OpenShift compatible)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: dept-barc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: nanopore_db
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nanopore-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgresql-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: dept-barc
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432

---
# Redis (OpenShift compatible)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: dept-barc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: dept-barc
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Python API Gateway (OpenShift compatible)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-gateway
  namespace: dept-barc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-gateway
  template:
    metadata:
      labels:
        app: python-gateway
    spec:
      containers:
      - name: python-gateway
        image: python:3.12-slim
        workingDir: /tmp
        command:
        - /bin/bash
        - -c
        - |
          # Install dependencies in user space
          pip install --user fastapi uvicorn asyncpg aioredis prometheus-client
          
          # Create main.py in /tmp (writable directory)
          cat > /tmp/main.py << 'EOF'
          from fastapi import FastAPI, HTTPException
          from fastapi.middleware.cors import CORSMiddleware
          from fastapi.responses import JSONResponse
          import asyncio
          import os
          from datetime import datetime
          import json
          
          app = FastAPI(title="Nanopore API Gateway", version="1.0.0")
          
          # CORS configuration
          app.add_middleware(
              CORSMiddleware,
              allow_origins=["*"],
              allow_credentials=True,
              allow_methods=["*"],
              allow_headers=["*"],
          )
          
          # In-memory storage for demo
          samples_db = [
              {"id": 1, "name": "Sample-001", "status": "processing", "priority": 1, "created_at": "2025-01-18T10:00:00Z"},
              {"id": 2, "name": "Sample-002", "status": "completed", "priority": 2, "created_at": "2025-01-18T09:30:00Z"},
              {"id": 3, "name": "Sample-003", "status": "pending", "priority": 3, "created_at": "2025-01-18T11:00:00Z"}
          ]
          
          @app.get("/health")
          async def health():
              return {
                  "status": "healthy", 
                  "timestamp": datetime.now().isoformat(),
                  "service": "nanopore-api-gateway",
                  "version": "1.0.0"
              }
          
          @app.get("/")
          async def root():
              return {
                  "message": "Nanopore API Gateway",
                  "version": "1.0.0",
                  "endpoints": {
                      "health": "/health",
                      "samples": "/api/v1/samples",
                      "auth": "/api/v1/auth",
                      "docs": "/docs"
                  }
              }
          
          @app.get("/api/v1/samples")
          async def get_samples():
              return samples_db
          
          @app.post("/api/v1/samples")
          async def create_sample(sample: dict):
              new_id = max([s["id"] for s in samples_db]) + 1 if samples_db else 1
              new_sample = {
                  "id": new_id,
                  "name": sample.get("name", f"Sample-{new_id:03d}"),
                  "status": "pending",
                  "priority": sample.get("priority", 1),
                  "created_at": datetime.now().isoformat() + "Z"
              }
              samples_db.append(new_sample)
              return new_sample
          
          @app.put("/api/v1/samples/{sample_id}")
          async def update_sample(sample_id: int, sample: dict):
              for i, s in enumerate(samples_db):
                  if s["id"] == sample_id:
                      samples_db[i].update(sample)
                      return samples_db[i]
              raise HTTPException(status_code=404, detail="Sample not found")
          
          @app.delete("/api/v1/samples/{sample_id}")
          async def delete_sample(sample_id: int):
              for i, s in enumerate(samples_db):
                  if s["id"] == sample_id:
                      deleted = samples_db.pop(i)
                      return {"message": "Sample deleted", "sample": deleted}
              raise HTTPException(status_code=404, detail="Sample not found")
          
          @app.get("/api/v1/auth/session")
          async def get_session():
              return {
                  "user": {"id": 1, "name": "Admin", "role": "admin", "email": "admin@example.com"}, 
                  "authenticated": True,
                  "session_id": "mock-session-123"
              }
          
          @app.post("/api/v1/auth/login")
          async def login(credentials: dict):
              # Mock authentication
              username = credentials.get("username", "")
              password = credentials.get("password", "")
              
              if username and password:
                  return {
                      "token": "mock-jwt-token-" + username,
                      "user": {"id": 1, "name": username.title(), "role": "admin", "email": f"{username}@example.com"},
                      "expires_in": 3600
                  }
              else:
                  raise HTTPException(status_code=401, detail="Invalid credentials")
          
          @app.post("/api/v1/auth/logout")
          async def logout():
              return {"message": "Logged out successfully"}
          
          # Stats endpoint
          @app.get("/api/v1/stats")
          async def get_stats():
              status_counts = {}
              for sample in samples_db:
                  status = sample["status"]
                  status_counts[status] = status_counts.get(status, 0) + 1
              
              return {
                  "total_samples": len(samples_db),
                  "status_breakdown": status_counts,
                  "system_info": {
                      "uptime": "healthy",
                      "database": "postgresql",
                      "cache": "redis"
                  }
              }
          EOF
          
          # Start the server
          export PATH="/home/$(whoami)/.local/bin:$PATH"
          cd /tmp && python -m uvicorn main:app --host 0.0.0.0 --port 8000
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: nanopore-config
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: nanopore-config
              key: REDIS_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 5

---
# Python Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: python-gateway
  namespace: dept-barc
spec:
  selector:
    app: python-gateway
  ports:
  - port: 8000
    targetPort: 8000

---
# Frontend Application (OpenShift compatible)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nanopore-frontend
  namespace: dept-barc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nanopore-frontend
  template:
    metadata:
      labels:
        app: nanopore-frontend
    spec:
      containers:
      - name: frontend
        image: node:18-alpine
        workingDir: /tmp
        command:
        - /bin/sh
        - -c
        - |
          # Install serve globally in user space
          npm install -g serve
          
          # Create the HTML file in /tmp
          mkdir -p /tmp/dist
          cat > /tmp/dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Nanopore Tracking - Python Microservices</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f8fafc; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; text-align: center; }
                  .header h1 { font-size: 2.5rem; margin-bottom: 10px; }
                  .header p { opacity: 0.9; font-size: 1.1rem; }
                  .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .status-card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border-left: 4px solid #10b981; }
                  .status-card h3 { color: #374151; margin-bottom: 10px; }
                  .status-value { font-size: 2rem; font-weight: bold; color: #10b981; }
                  .status-label { color: #6b7280; font-size: 0.9rem; }
                  .controls { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); margin-bottom: 30px; }
                  .btn { padding: 12px 24px; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer; margin: 5px; font-size: 14px; transition: all 0.2s; }
                  .btn:hover { background: #2563eb; transform: translateY(-1px); }
                  .btn-success { background: #10b981; }
                  .btn-success:hover { background: #059669; }
                  .btn-warning { background: #f59e0b; }
                  .btn-warning:hover { background: #d97706; }
                  .samples-container { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                  .samples-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
                  .sample-card { padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; background: #fafafa; transition: all 0.2s; }
                  .sample-card:hover { box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
                  .sample-header { font-weight: bold; font-size: 1.1rem; margin-bottom: 10px; color: #374151; }
                  .sample-status { padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: 500; display: inline-block; margin-bottom: 10px; }
                  .status-processing { background: #fef3c7; color: #92400e; }
                  .status-completed { background: #d1fae5; color: #065f46; }
                  .status-pending { background: #dbeafe; color: #1e40af; }
                  .sample-details { color: #6b7280; font-size: 0.9rem; }
                  .loading { text-align: center; padding: 40px; color: #6b7280; }
                  .error { color: #ef4444; text-align: center; padding: 20px; background: #fef2f2; border-radius: 8px; margin: 20px 0; }
                  .success { color: #10b981; text-align: center; padding: 20px; background: #f0fdf4; border-radius: 8px; margin: 20px 0; }
                  .api-status { margin-top: 30px; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                  .endpoint-status { display: flex; justify-content: space-between; align-items: center; padding: 10px; margin: 5px 0; border-radius: 6px; background: #f9fafb; }
                  .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; }
                  .modal-content { background: white; margin: 10% auto; padding: 20px; border-radius: 10px; max-width: 500px; }
                  .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
                  .close { font-size: 28px; cursor: pointer; }
                  .form-group { margin-bottom: 15px; }
                  .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
                  .form-group input, .form-group select { width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 6px; }
                  .deployment-info { background: #f0f9ff; padding: 15px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid #3b82f6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🧬 Nanopore Tracking System</h1>
                      <p>Python Microservices Architecture - Production Ready on OpenShift</p>
                  </div>
                  
                  <div class="deployment-info">
                      <h3>🚀 Deployment Information</h3>
                      <p><strong>Environment:</strong> OpenShift Production</p>
                      <p><strong>Architecture:</strong> Python FastAPI Microservices</p>
                      <p><strong>Frontend:</strong> https://nanopore-app-dept-barc.apps.cloudapps.unc.edu</p>
                      <p><strong>API Gateway:</strong> https://nanopore-api-dept-barc.apps.cloudapps.unc.edu</p>
                  </div>
                  
                  <div class="status-grid">
                      <div class="status-card">
                          <h3>System Status</h3>
                          <div id="system-status" class="status-value">Loading...</div>
                          <div class="status-label">API Gateway Health</div>
                      </div>
                      <div class="status-card">
                          <h3>Total Samples</h3>
                          <div id="sample-count" class="status-value">-</div>
                          <div class="status-label">Active Samples</div>
                      </div>
                      <div class="status-card">
                          <h3>Processing</h3>
                          <div id="processing-count" class="status-value">-</div>
                          <div class="status-label">In Progress</div>
                      </div>
                      <div class="status-card">
                          <h3>Completed</h3>
                          <div id="completed-count" class="status-value">-</div>
                          <div class="status-label">Finished</div>
                      </div>
                  </div>
                  
                  <div class="controls">
                      <button class="btn btn-success" onclick="loadSamples()">🔄 Refresh Data</button>
                      <button class="btn" onclick="showCreateModal()">➕ Create Sample</button>
                      <button class="btn btn-warning" onclick="testAPI()">🔧 Test API</button>
                      <button class="btn" onclick="exportData()">📊 Export Data</button>
                  </div>
                  
                  <div class="samples-container">
                      <h3 style="margin-bottom: 20px; color: #374151;">Sample Management</h3>
                      <div id="samples-container">
                          <div class="loading">Loading samples...</div>
                      </div>
                  </div>
                  
                  <div class="api-status">
                      <h3 style="margin-bottom: 15px; color: #374151;">API Endpoints Status</h3>
                      <div id="api-endpoints">Checking endpoints...</div>
                  </div>
              </div>
              
              <!-- Create Sample Modal -->
              <div id="createModal" class="modal">
                  <div class="modal-content">
                      <div class="modal-header">
                          <h3>Create New Sample</h3>
                          <span class="close" onclick="closeModal()">&times;</span>
                      </div>
                      <form id="createForm">
                          <div class="form-group">
                              <label for="sampleName">Sample Name</label>
                              <input type="text" id="sampleName" required>
                          </div>
                          <div class="form-group">
                              <label for="samplePriority">Priority</label>
                              <select id="samplePriority">
                                  <option value="1">Low (1)</option>
                                  <option value="2">Medium (2)</option>
                                  <option value="3">High (3)</option>
                                  <option value="4">Urgent (4)</option>
                                  <option value="5">Critical (5)</option>
                              </select>
                          </div>
                          <button type="submit" class="btn btn-success">Create Sample</button>
                          <button type="button" class="btn" onclick="closeModal()">Cancel</button>
                      </form>
                  </div>
              </div>
              
              <script>
                  // API Base URL for OpenShift
                  const API_BASE = 'https://nanopore-api-dept-barc.apps.cloudapps.unc.edu';
                  
                  console.log('API Base URL:', API_BASE);
                  
                  let samples = [];
                  
                  async function checkSystemStatus() {
                      try {
                          const response = await fetch(`${API_BASE}/health`);
                          const data = await response.json();
                          document.getElementById('system-status').innerHTML = '✅ Healthy';
                          document.getElementById('system-status').style.color = '#10b981';
                      } catch (error) {
                          document.getElementById('system-status').innerHTML = '❌ Error';
                          document.getElementById('system-status').style.color = '#ef4444';
                          console.error('Health check failed:', error);
                      }
                  }
                  
                  async function loadSamples() {
                      try {
                          const response = await fetch(`${API_BASE}/api/v1/samples`);
                          samples = await response.json();
                          
                          updateSampleCounts();
                          renderSamples();
                          
                      } catch (error) {
                          document.getElementById('samples-container').innerHTML = `
                              <div class="error">❌ Error loading samples: ${error.message}</div>
                          `;
                          console.error('Failed to load samples:', error);
                      }
                  }
                  
                  function updateSampleCounts() {
                      const totalCount = samples.length;
                      const processingCount = samples.filter(s => s.status === 'processing').length;
                      const completedCount = samples.filter(s => s.status === 'completed').length;
                      
                      document.getElementById('sample-count').textContent = totalCount;
                      document.getElementById('processing-count').textContent = processingCount;
                      document.getElementById('completed-count').textContent = completedCount;
                  }
                  
                  function renderSamples() {
                      const container = document.getElementById('samples-container');
                      
                      if (samples.length === 0) {
                          container.innerHTML = '<div class="loading">No samples found. Create your first sample!</div>';
                          return;
                      }
                      
                      container.innerHTML = `
                          <div class="samples-grid">
                              ${samples.map(sample => `
                                  <div class="sample-card">
                                      <div class="sample-header">${sample.name}</div>
                                      <div class="sample-status status-${sample.status}">${sample.status.toUpperCase()}</div>
                                      <div class="sample-details">
                                          <strong>ID:</strong> ${sample.id}<br>
                                          <strong>Priority:</strong> ${sample.priority}<br>
                                          <strong>Created:</strong> ${new Date(sample.created_at).toLocaleDateString()}
                                      </div>
                                      <div style="margin-top: 10px;">
                                          <button class="btn" onclick="updateSampleStatus(${sample.id})" style="font-size: 12px; padding: 6px 12px;">Update Status</button>
                                          <button class="btn" onclick="deleteSample(${sample.id})" style="font-size: 12px; padding: 6px 12px; background: #ef4444;">Delete</button>
                                      </div>
                                  </div>
                              `).join('')}
                          </div>
                      `;
                  }
                  
                  async function createSample(name, priority) {
                      try {
                          const response = await fetch(`${API_BASE}/api/v1/samples`, {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ name, priority: parseInt(priority) })
                          });
                          
                          if (response.ok) {
                              showMessage('Sample created successfully!', 'success');
                              loadSamples();
                              closeModal();
                          } else {
                              throw new Error('Failed to create sample');
                          }
                      } catch (error) {
                          showMessage(`Error creating sample: ${error.message}`, 'error');
                      }
                  }
                  
                  async function updateSampleStatus(sampleId) {
                      const newStatus = prompt('Enter new status (pending, processing, completed):');
                      if (!newStatus) return;
                      
                      try {
                          const response = await fetch(`${API_BASE}/api/v1/samples/${sampleId}`, {
                              method: 'PUT',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ status: newStatus })
                          });
                          
                          if (response.ok) {
                              showMessage('Sample updated successfully!', 'success');
                              loadSamples();
                          } else {
                              throw new Error('Failed to update sample');
                          }
                      } catch (error) {
                          showMessage(`Error updating sample: ${error.message}`, 'error');
                      }
                  }
                  
                  async function deleteSample(sampleId) {
                      if (!confirm('Are you sure you want to delete this sample?')) return;
                      
                      try {
                          const response = await fetch(`${API_BASE}/api/v1/samples/${sampleId}`, {
                              method: 'DELETE'
                          });
                          
                          if (response.ok) {
                              showMessage('Sample deleted successfully!', 'success');
                              loadSamples();
                          } else {
                              throw new Error('Failed to delete sample');
                          }
                      } catch (error) {
                          showMessage(`Error deleting sample: ${error.message}`, 'error');
                      }
                  }
                  
                  async function testAPI() {
                      const endpoints = [
                          { name: 'Gateway Health', url: '/health' },
                          { name: 'Samples API', url: '/api/v1/samples' },
                          { name: 'Auth Session', url: '/api/v1/auth/session' },
                          { name: 'Statistics', url: '/api/v1/stats' }
                      ];
                      
                      let results = [];
                      for (const endpoint of endpoints) {
                          try {
                              const response = await fetch(`${API_BASE}${endpoint.url}`);
                              const status = response.ok ? '✅' : '❌';
                              results.push(`
                                  <div class="endpoint-status">
                                      <span>${endpoint.name}</span>
                                      <span>${status} ${response.status}</span>
                                  </div>
                              `);
                          } catch (error) {
                              results.push(`
                                  <div class="endpoint-status">
                                      <span>${endpoint.name}</span>
                                      <span>❌ Error</span>
                                  </div>
                              `);
                          }
                      }
                      
                      document.getElementById('api-endpoints').innerHTML = results.join('');
                  }
                  
                  function showCreateModal() {
                      document.getElementById('createModal').style.display = 'block';
                  }
                  
                  function closeModal() {
                      document.getElementById('createModal').style.display = 'none';
                  }
                  
                  function showMessage(message, type) {
                      const messageDiv = document.createElement('div');
                      messageDiv.className = type;
                      messageDiv.textContent = message;
                      document.querySelector('.controls').appendChild(messageDiv);
                      
                      setTimeout(() => {
                          messageDiv.remove();
                      }, 3000);
                  }
                  
                  function exportData() {
                      const dataStr = JSON.stringify(samples, null, 2);
                      const dataBlob = new Blob([dataStr], {type: 'application/json'});
                      const url = URL.createObjectURL(dataBlob);
                      const link = document.createElement('a');
                      link.href = url;
                      link.download = 'nanopore-samples.json';
                      link.click();
                      URL.revokeObjectURL(url);
                  }
                  
                  // Event listeners
                  document.getElementById('createForm').addEventListener('submit', (e) => {
                      e.preventDefault();
                      const name = document.getElementById('sampleName').value;
                      const priority = document.getElementById('samplePriority').value;
                      createSample(name, priority);
                  });
                  
                  // Close modal when clicking outside
                  window.onclick = function(event) {
                      const modal = document.getElementById('createModal');
                      if (event.target === modal) {
                          closeModal();
                      }
                  }
                  
                  // Initialize
                  checkSystemStatus();
                  loadSamples();
                  testAPI();
                  
                  // Auto-refresh every 30 seconds
                  setInterval(() => {
                      checkSystemStatus();
                      loadSamples();
                  }, 30000);
              </script>
          </body>
          </html>
          EOF
          
          # Start the server
          cd /tmp && serve -s dist -l 3001
        ports:
        - containerPort: 3001
        env:
        - name: VITE_API_URL
          valueFrom:
            configMapKeyRef:
              name: nanopore-config
              key: API_GATEWAY_URL
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 5

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: nanopore-frontend
  namespace: dept-barc
spec:
  selector:
    app: nanopore-frontend
  ports:
  - port: 3001
    targetPort: 3001

---
# Route for Frontend
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: nanopore-app
  namespace: dept-barc
spec:
  to:
    kind: Service
    name: nanopore-frontend
  port:
    targetPort: 3001
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

---
# Route for API Gateway
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: nanopore-api
  namespace: dept-barc
spec:
  to:
    kind: Service
    name: python-gateway
  port:
    targetPort: 8000
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect 