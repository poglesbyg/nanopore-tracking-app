---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-sample-management-code
  namespace: nanopore-mcp
data:
  package.json: |
    {
      "name": "mcp-sample-management-server",
      "version": "1.0.0",
      "description": "MCP Server for Sample Management",
      "main": "dist/index.js",
      "scripts": {
        "build": "tsc",
        "start": "node dist/index.js",
        "dev": "ts-node src/index.ts"
      },
      "dependencies": {
        "@modelcontextprotocol/sdk": "^0.5.0",
        "zod": "^3.22.0",
        "kysely": "^0.27.0",
        "pg": "^8.11.0"
      },
      "devDependencies": {
        "@types/node": "^20.0.0",
        "@types/pg": "^8.10.0",
        "typescript": "^5.0.0",
        "ts-node": "^10.9.0"
      }
    }
  
  tsconfig.json: |
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "outDir": "./dist",
        "rootDir": "./src",
        "resolveJsonModule": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules", "dist"]
    }

  index.ts: |
    import { Server } from '@modelcontextprotocol/sdk/server/index.js';
    import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
    import {
      CallToolRequestSchema,
      ListToolsRequestSchema,
    } from '@modelcontextprotocol/sdk/types.js';
    import { z } from 'zod';

    // Sample Management MCP Server
    const server = new Server(
      {
        name: 'sample-management-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    // Tool schemas
    const AnalyzeWorkflowSchema = z.object({
      time_period: z.enum(['week', 'month', 'quarter']),
      sample_types: z.array(z.string()).optional(),
      include_bottlenecks: z.boolean().optional()
    });

    const OptimizeScheduleSchema = z.object({
      priority_weights: z.object({
        urgent: z.number(),
        high: z.number(),
        normal: z.number(),
        low: z.number()
      }),
      resource_constraints: z.object({
        max_daily_samples: z.number(),
        available_operators: z.array(z.string()),
        equipment_capacity: z.record(z.number())
      }),
      optimization_window_days: z.number()
    });

    // List available tools
    server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'analyze_workflow_performance',
            description: 'Analyze laboratory workflow performance and identify bottlenecks',
            inputSchema: {
              type: 'object',
              properties: {
                time_period: {
                  type: 'string',
                  enum: ['week', 'month', 'quarter'],
                  description: 'Time period for analysis'
                },
                sample_types: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Sample types to include in analysis'
                },
                include_bottlenecks: {
                  type: 'boolean',
                  description: 'Whether to include bottleneck analysis'
                }
              },
              required: ['time_period']
            }
          },
          {
            name: 'optimize_sample_schedule',
            description: 'Optimize sample processing schedule for maximum efficiency',
            inputSchema: {
              type: 'object',
              properties: {
                priority_weights: {
                  type: 'object',
                  properties: {
                    urgent: { type: 'number' },
                    high: { type: 'number' },
                    normal: { type: 'number' },
                    low: { type: 'number' }
                  }
                },
                resource_constraints: {
                  type: 'object',
                  properties: {
                    max_daily_samples: { type: 'number' },
                    available_operators: {
                      type: 'array',
                      items: { type: 'string' }
                    },
                    equipment_capacity: {
                      type: 'object',
                      additionalProperties: { type: 'number' }
                    }
                  }
                },
                optimization_window_days: { type: 'number' }
              },
              required: ['priority_weights', 'resource_constraints', 'optimization_window_days']
            }
          }
        ]
      };
    });

    // Handle tool calls
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      switch (name) {
        case 'analyze_workflow_performance': {
          const params = AnalyzeWorkflowSchema.parse(args);
          
          // Mock analysis data
          const analysis = {
            analysis_type: 'workflow_performance',
            time_period: params.time_period,
            bottlenecks: params.include_bottlenecks ? [
              {
                stage: 'library_preparation',
                severity: 'high',
                average_delay_hours: 4.2,
                affected_samples: 15,
                suggested_actions: ['Add additional library prep station', 'Optimize reagent preparation']
              }
            ] : [],
            performance_metrics: {
              total_samples_processed: 45,
              average_processing_time_hours: 72,
              completion_rate: 92.3,
              quality_pass_rate: 88.9
            }
          };

          return {
            content: [
              {
                type: 'text',
                text: JSON.stringify(analysis, null, 2)
              }
            ]
          };
        }

        case 'optimize_sample_schedule': {
          const params = OptimizeScheduleSchema.parse(args);
          
          // Mock optimization data
          const optimization = {
            analysis_type: 'schedule_optimization',
            optimized_queue: [
              {
                sample_id: 'NANO-001',
                priority: 'urgent',
                estimated_start: new Date(Date.now() + 1000 * 60 * 60).toISOString(),
                estimated_completion: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
                assigned_operator: params.resource_constraints.available_operators[0] || 'operator_1'
              }
            ],
            efficiency_gains: {
              time_saved_hours: 8.5,
              throughput_increase_percent: 15.2,
              resource_utilization_percent: 89.3
            }
          };

          return {
            content: [
              {
                type: 'text',
                text: JSON.stringify(optimization, null, 2)
              }
            ]
          };
        }

        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    });

    // Health check endpoint
    async function startServer() {
      const transport = new StdioServerTransport();
      await server.connect(transport);
      console.log('Sample Management MCP Server running on port 3010');
    }

    startServer().catch(console.error);

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-nanopore-domain-code
  namespace: nanopore-mcp
data:
  package.json: |
    {
      "name": "mcp-nanopore-domain-server",
      "version": "1.0.0",
      "description": "MCP Server for Nanopore Domain Expertise",
      "main": "dist/index.js",
      "scripts": {
        "build": "tsc",
        "start": "node dist/index.js",
        "dev": "ts-node src/index.ts"
      },
      "dependencies": {
        "@modelcontextprotocol/sdk": "^0.5.0",
        "zod": "^3.22.0",
        "kysely": "^0.27.0",
        "pg": "^8.11.0"
      },
      "devDependencies": {
        "@types/node": "^20.0.0",
        "@types/pg": "^8.10.0",
        "typescript": "^5.0.0",
        "ts-node": "^10.9.0"
      }
    }
  
  tsconfig.json: |
    {
      "compilerOptions": {
        "target": "ES2022",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "outDir": "./dist",
        "rootDir": "./src",
        "resolveJsonModule": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true
      },
      "include": ["src/**/*"],
      "exclude": ["node_modules", "dist"]
    }

  index.ts: |
    import { Server } from '@modelcontextprotocol/sdk/server/index.js';
    import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
    import {
      CallToolRequestSchema,
      ListToolsRequestSchema,
    } from '@modelcontextprotocol/sdk/types.js';
    import { z } from 'zod';

    // Nanopore Domain Expert MCP Server
    const server = new Server(
      {
        name: 'nanopore-domain-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    // Tool schemas
    const ProtocolAnalysisSchema = z.object({
      sample_type: z.enum(['DNA', 'RNA', 'Protein', 'Other']),
      sample_concentration: z.number().optional(),
      sample_volume: z.number().optional(),
      target_application: z.string(),
      budget_level: z.enum(['low', 'medium', 'high', 'unlimited']).optional(),
      timeline: z.enum(['urgent', 'standard', 'flexible']).optional(),
      special_requirements: z.array(z.string()).optional()
    });

    const QualityAssessmentSchema = z.object({
      sample_id: z.string().optional(),
      quality_metrics: z.object({
        concentration: z.number().optional(),
        volume: z.number().optional(),
        purity_260_280: z.number().optional(),
        purity_260_230: z.number().optional(),
        dna_integrity_number: z.number().optional(),
        fragment_size_distribution: z.string().optional(),
        contamination_level: z.enum(['none', 'low', 'medium', 'high']).optional()
      }),
      sample_type: z.enum(['DNA', 'RNA', 'Protein', 'Other']),
      intended_application: z.string(),
      flow_cell_type: z.enum(['R9.4.1', 'R10.4.1', 'R10.5.1', 'Other']).optional()
    });

    // List available tools
    server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'analyze_protocol_recommendation',
            description: 'Analyze sample characteristics and recommend optimal sequencing protocols',
            inputSchema: {
              type: 'object',
              properties: {
                sample_type: {
                  type: 'string',
                  enum: ['DNA', 'RNA', 'Protein', 'Other'],
                  description: 'Type of sample to be sequenced'
                },
                sample_concentration: {
                  type: 'number',
                  description: 'Sample concentration in ng/μL'
                },
                sample_volume: {
                  type: 'number',
                  description: 'Sample volume in μL'
                },
                target_application: {
                  type: 'string',
                  description: 'Intended sequencing application'
                },
                budget_level: {
                  type: 'string',
                  enum: ['low', 'medium', 'high', 'unlimited'],
                  description: 'Budget constraints'
                },
                timeline: {
                  type: 'string',
                  enum: ['urgent', 'standard', 'flexible'],
                  description: 'Timeline requirements'
                }
              },
              required: ['sample_type', 'target_application']
            }
          },
          {
            name: 'assess_sample_quality',
            description: 'Assess sample quality and predict sequencing success probability',
            inputSchema: {
              type: 'object',
              properties: {
                quality_metrics: {
                  type: 'object',
                  properties: {
                    concentration: { type: 'number' },
                    volume: { type: 'number' },
                    purity_260_280: { type: 'number' },
                    purity_260_230: { type: 'number' },
                    dna_integrity_number: { type: 'number' },
                    contamination_level: {
                      type: 'string',
                      enum: ['none', 'low', 'medium', 'high']
                    }
                  }
                },
                sample_type: {
                  type: 'string',
                  enum: ['DNA', 'RNA', 'Protein', 'Other']
                },
                intended_application: { type: 'string' }
              },
              required: ['quality_metrics', 'sample_type', 'intended_application']
            }
          }
        ]
      };
    });

    // Handle tool calls
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      switch (name) {
        case 'analyze_protocol_recommendation': {
          const params = ProtocolAnalysisSchema.parse(args);
          
          // Mock protocol recommendation
          const recommendations = [];
          
          if (params.sample_type === 'DNA') {
            if (params.sample_concentration && params.sample_concentration >= 50) {
              recommendations.push({
                protocol_name: 'Ligation Sequencing Kit',
                protocol_version: 'SQK-LSK114',
                suitability_score: 95,
                recommended_kit: 'SQK-LSK114',
                estimated_yield: '15-30 Gb',
                estimated_read_length: '10-50 kb average',
                preparation_time: '4-6 hours',
                difficulty_level: 'intermediate'
              });
            }
            
            if (params.timeline === 'urgent') {
              recommendations.push({
                protocol_name: 'Rapid Sequencing Kit',
                protocol_version: 'SQK-RAD004',
                suitability_score: 80,
                recommended_kit: 'SQK-RAD004',
                estimated_yield: '5-15 Gb',
                estimated_read_length: '5-20 kb average',
                preparation_time: '10 minutes',
                difficulty_level: 'beginner'
              });
            }
          }

          const analysis = {
            analysis_type: 'protocol_recommendation',
            sample_info: {
              type: params.sample_type,
              concentration: params.sample_concentration,
              volume: params.sample_volume,
              application: params.target_application
            },
            recommendations: recommendations.sort((a, b) => b.suitability_score - a.suitability_score),
            summary: {
              total_protocols: recommendations.length,
              top_recommendation: recommendations[0]?.protocol_name || 'None available',
              estimated_prep_time: recommendations[0]?.preparation_time || 'Variable',
              estimated_yield: recommendations[0]?.estimated_yield || 'Variable'
            }
          };

          return {
            content: [
              {
                type: 'text',
                text: JSON.stringify(analysis, null, 2)
              }
            ]
          };
        }

        case 'assess_sample_quality': {
          const params = QualityAssessmentSchema.parse(args);
          
          let overallScore = 100;
          const criticalIssues: string[] = [];
          const warnings: string[] = [];
          const recommendations: string[] = [];

          // Quality assessment logic
          if (params.quality_metrics.concentration !== undefined) {
            const conc = params.quality_metrics.concentration;
            
            if (params.sample_type === 'DNA') {
              if (conc < 10) {
                overallScore -= 30;
                criticalIssues.push('DNA concentration too low (<10 ng/μL)');
                recommendations.push('Consider PCR amplification or concentrate sample');
              } else if (conc < 50) {
                overallScore -= 15;
                warnings.push('DNA concentration suboptimal (10-50 ng/μL)');
                recommendations.push('Consider concentrating sample for better yield');
              }
            }
          }

          let qualityGrade: 'excellent' | 'good' | 'acceptable' | 'poor' | 'failed';
          if (overallScore >= 90) qualityGrade = 'excellent';
          else if (overallScore >= 75) qualityGrade = 'good';
          else if (overallScore >= 60) qualityGrade = 'acceptable';
          else if (overallScore >= 40) qualityGrade = 'poor';
          else qualityGrade = 'failed';

          const assessment = {
            overall_score: Math.max(0, overallScore),
            quality_grade: qualityGrade,
            critical_issues: criticalIssues,
            warnings: warnings,
            recommendations: recommendations,
            estimated_success_probability: Math.max(0, Math.min(100, overallScore))
          };

          return {
            content: [
              {
                type: 'text',
                text: JSON.stringify(assessment, null, 2)
              }
            ]
          };
        }

        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    });

    // Health check endpoint
    async function startServer() {
      const transport = new StdioServerTransport();
      await server.connect(transport);
      console.log('Nanopore Domain Expert MCP Server running on port 3011');
    }

    startServer().catch(console.error);

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nanopore-app-code
  namespace: nanopore-mcp
data:
  package.json: |
    {
      "name": "nanopore-tracking-app",
      "version": "1.0.0",
      "description": "MCP-Enhanced Nanopore Tracking Application",
      "main": "dist/server.js",
      "scripts": {
        "build": "astro build",
        "start": "node dist/server.js",
        "dev": "astro dev"
      },
      "dependencies": {
        "astro": "^5.11.1",
        "@astrojs/node": "^8.2.0",
        "@astrojs/react": "^3.0.0",
        "@astrojs/tailwind": "^6.0.0",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "@trpc/server": "^10.45.0",
        "@trpc/client": "^10.45.0",
        "kysely": "^0.27.0",
        "pg": "^8.11.0",
        "zod": "^3.22.0",
        "sonner": "^1.4.0"
      },
      "devDependencies": {
        "@types/node": "^20.0.0",
        "@types/pg": "^8.10.0",
        "@types/react": "^18.0.0",
        "@types/react-dom": "^18.0.0",
        "typescript": "^5.0.0",
        "tailwindcss": "^3.4.0"
      }
    }

  astro.config.mjs: |
    import { defineConfig } from 'astro/config';
    import react from '@astrojs/react';
    import tailwind from '@astrojs/tailwind';
    import node from '@astrojs/node';

    export default defineConfig({
      integrations: [react(), tailwind()],
      output: 'server',
      adapter: node({
        mode: 'standalone'
      }),
      server: {
        port: 3001,
        host: '0.0.0.0'
      }
    });

  server.js: |
    import { handler as astroHandler } from './dist/server/entry.mjs';
    import express from 'express';
    
    const app = express();
    const port = process.env.PORT || 3001;
    
    // Health check endpoint
    app.get('/health', (req, res) => {
      res.status(200).json({ status: 'healthy', timestamp: new Date().toISOString() });
    });
    
    // Astro handler
    app.use(astroHandler);
    
    app.listen(port, '0.0.0.0', () => {
      console.log(`MCP-Enhanced Nanopore Tracking App running on port ${port}`);
    }); 